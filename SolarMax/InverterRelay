#!/usr/bin/python
# -* coding: utf-8 *-

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Developed 2009-2010 by Bernd Wurst <bernd@schokokeks.org> 
# for own use.
# Released to the public in 2012.


import time, sys, os
from solarmax import SolarMax

# Array of inverters in system. IP address and device number
# factory default is likely 192.168.1.123:12345 1
inverters = {'192.168.1.123': [1,]}

smlist = []
for host in inverters.keys():
  sm = SolarMax(host, 12345) #using port 12345
  sm.use_inverters(inverters[host])
  smlist.append(sm)
allinverters = []
for host in inverters.keys():
  allinverters.extend(inverters[host])

count = 0
for sm in smlist:
  for (no, ivdata) in sm.inverters().items():
    try:
      # Pass the parameters you wish to get from the inverter and log. Power, Voltage and Temp are all that's required for PVoutput.
      (inverter, current) = sm.query(no, ['PAC','UL1', 'TKK'])
      count += 1
    except:
       print ('Communication Error, WR %i' % no)
    continue

    ivmax = ivdata['installed']
    ivname = ivdata['desc']

    print("PAC = "+str(current['PAC']))
    print("Voltage = "+str(current['UL1']))
    print("Temp = "+str(current['TKK']))

    (status, errors) = sm.status(no)

    if errors:
      print ('WR %i: %s (%s)' % (no, status, errors))
      try:
        print("details: ", int(PAC),int(TEMP),int(VOLTAGE))
      except:
        pass

if count < len(allinverters):
  print ('Not all inverters queried (%i < %i)' % (count, len(allinverters)))



